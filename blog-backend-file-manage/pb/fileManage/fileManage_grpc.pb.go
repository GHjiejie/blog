// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/fileManage.proto

// 设置包的名称

package fileManage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileManageService_DeleteFile_FullMethodName    = "/fileManage.fileManageService/DeleteFile"
	FileManageService_QueryFile_FullMethodName     = "/fileManage.fileManageService/QueryFile"
	FileManageService_QueryFileById_FullMethodName = "/fileManage.fileManageService/QueryFileById"
	FileManageService_GetFileList_FullMethodName   = "/fileManage.fileManageService/GetFileList"
)

// FileManageServiceClient is the client API for FileManageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManageServiceClient interface {
	// 删除文件
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	// 文件的模糊查询(根据上传文件的标签、类型等)
	QueryFile(ctx context.Context, in *QueryFileRequest, opts ...grpc.CallOption) (*QueryFileResponse, error)
	// 根据文件ID查询文件
	QueryFileById(ctx context.Context, in *QueryFileByIdRequest, opts ...grpc.CallOption) (*QueryFileByIdResponse, error)
	// 获取文件列表
	GetFileList(ctx context.Context, in *GetFileListRequest, opts ...grpc.CallOption) (*GetFileListResponse, error)
}

type fileManageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileManageServiceClient(cc grpc.ClientConnInterface) FileManageServiceClient {
	return &fileManageServiceClient{cc}
}

func (c *fileManageServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, FileManageService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManageServiceClient) QueryFile(ctx context.Context, in *QueryFileRequest, opts ...grpc.CallOption) (*QueryFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFileResponse)
	err := c.cc.Invoke(ctx, FileManageService_QueryFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManageServiceClient) QueryFileById(ctx context.Context, in *QueryFileByIdRequest, opts ...grpc.CallOption) (*QueryFileByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFileByIdResponse)
	err := c.cc.Invoke(ctx, FileManageService_QueryFileById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManageServiceClient) GetFileList(ctx context.Context, in *GetFileListRequest, opts ...grpc.CallOption) (*GetFileListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileListResponse)
	err := c.cc.Invoke(ctx, FileManageService_GetFileList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManageServiceServer is the server API for FileManageService service.
// All implementations must embed UnimplementedFileManageServiceServer
// for forward compatibility.
type FileManageServiceServer interface {
	// 删除文件
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	// 文件的模糊查询(根据上传文件的标签、类型等)
	QueryFile(context.Context, *QueryFileRequest) (*QueryFileResponse, error)
	// 根据文件ID查询文件
	QueryFileById(context.Context, *QueryFileByIdRequest) (*QueryFileByIdResponse, error)
	// 获取文件列表
	GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error)
	mustEmbedUnimplementedFileManageServiceServer()
}

// UnimplementedFileManageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileManageServiceServer struct{}

func (UnimplementedFileManageServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileManageServiceServer) QueryFile(context.Context, *QueryFileRequest) (*QueryFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFile not implemented")
}
func (UnimplementedFileManageServiceServer) QueryFileById(context.Context, *QueryFileByIdRequest) (*QueryFileByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFileById not implemented")
}
func (UnimplementedFileManageServiceServer) GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileList not implemented")
}
func (UnimplementedFileManageServiceServer) mustEmbedUnimplementedFileManageServiceServer() {}
func (UnimplementedFileManageServiceServer) testEmbeddedByValue()                           {}

// UnsafeFileManageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileManageServiceServer will
// result in compilation errors.
type UnsafeFileManageServiceServer interface {
	mustEmbedUnimplementedFileManageServiceServer()
}

func RegisterFileManageServiceServer(s grpc.ServiceRegistrar, srv FileManageServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileManageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileManageService_ServiceDesc, srv)
}

func _FileManageService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManageService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManageService_QueryFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServiceServer).QueryFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManageService_QueryFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServiceServer).QueryFile(ctx, req.(*QueryFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManageService_QueryFileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFileByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServiceServer).QueryFileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManageService_QueryFileById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServiceServer).QueryFileById(ctx, req.(*QueryFileByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManageService_GetFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServiceServer).GetFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManageService_GetFileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServiceServer).GetFileList(ctx, req.(*GetFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileManageService_ServiceDesc is the grpc.ServiceDesc for FileManageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileManageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileManage.fileManageService",
	HandlerType: (*FileManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFile",
			Handler:    _FileManageService_DeleteFile_Handler,
		},
		{
			MethodName: "QueryFile",
			Handler:    _FileManageService_QueryFile_Handler,
		},
		{
			MethodName: "QueryFileById",
			Handler:    _FileManageService_QueryFileById_Handler,
		},
		{
			MethodName: "GetFileList",
			Handler:    _FileManageService_GetFileList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fileManage.proto",
}
