// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/articleManage.proto

// 设置包的名称

package articleManage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArticleManageService_PublishArticle_FullMethodName = "/articleManage.articleManageService/PublishArticle"
	ArticleManageService_UpdateArticle_FullMethodName  = "/articleManage.articleManageService/UpdateArticle"
	ArticleManageService_DeleteArticle_FullMethodName  = "/articleManage.articleManageService/DeleteArticle"
	ArticleManageService_GetArticleList_FullMethodName = "/articleManage.articleManageService/GetArticleList"
	ArticleManageService_QueryArticle_FullMethodName   = "/articleManage.articleManageService/QueryArticle"
)

// ArticleManageServiceClient is the client API for ArticleManageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleManageServiceClient interface {
	// 基于当前文件发布文章
	PublishArticle(ctx context.Context, in *PublishArticleRequest, opts ...grpc.CallOption) (*PublishArticleResponse, error)
	// 修改文章
	UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleResponse, error)
	// 删除文章
	DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error)
	// 获取文章列表
	GetArticleList(ctx context.Context, in *GetArticleListRequest, opts ...grpc.CallOption) (*GetArticleListResponse, error)
	// 文章的模糊查询
	QueryArticle(ctx context.Context, in *QueryArticleRequest, opts ...grpc.CallOption) (*QueryArticleResponse, error)
}

type articleManageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleManageServiceClient(cc grpc.ClientConnInterface) ArticleManageServiceClient {
	return &articleManageServiceClient{cc}
}

func (c *articleManageServiceClient) PublishArticle(ctx context.Context, in *PublishArticleRequest, opts ...grpc.CallOption) (*PublishArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishArticleResponse)
	err := c.cc.Invoke(ctx, ArticleManageService_PublishArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManageServiceClient) UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateArticleResponse)
	err := c.cc.Invoke(ctx, ArticleManageService_UpdateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManageServiceClient) DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteArticleResponse)
	err := c.cc.Invoke(ctx, ArticleManageService_DeleteArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManageServiceClient) GetArticleList(ctx context.Context, in *GetArticleListRequest, opts ...grpc.CallOption) (*GetArticleListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticleListResponse)
	err := c.cc.Invoke(ctx, ArticleManageService_GetArticleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManageServiceClient) QueryArticle(ctx context.Context, in *QueryArticleRequest, opts ...grpc.CallOption) (*QueryArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryArticleResponse)
	err := c.cc.Invoke(ctx, ArticleManageService_QueryArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleManageServiceServer is the server API for ArticleManageService service.
// All implementations must embed UnimplementedArticleManageServiceServer
// for forward compatibility.
type ArticleManageServiceServer interface {
	// 基于当前文件发布文章
	PublishArticle(context.Context, *PublishArticleRequest) (*PublishArticleResponse, error)
	// 修改文章
	UpdateArticle(context.Context, *UpdateArticleRequest) (*UpdateArticleResponse, error)
	// 删除文章
	DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleResponse, error)
	// 获取文章列表
	GetArticleList(context.Context, *GetArticleListRequest) (*GetArticleListResponse, error)
	// 文章的模糊查询
	QueryArticle(context.Context, *QueryArticleRequest) (*QueryArticleResponse, error)
	mustEmbedUnimplementedArticleManageServiceServer()
}

// UnimplementedArticleManageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticleManageServiceServer struct{}

func (UnimplementedArticleManageServiceServer) PublishArticle(context.Context, *PublishArticleRequest) (*PublishArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishArticle not implemented")
}
func (UnimplementedArticleManageServiceServer) UpdateArticle(context.Context, *UpdateArticleRequest) (*UpdateArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleManageServiceServer) DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleManageServiceServer) GetArticleList(context.Context, *GetArticleListRequest) (*GetArticleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleList not implemented")
}
func (UnimplementedArticleManageServiceServer) QueryArticle(context.Context, *QueryArticleRequest) (*QueryArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryArticle not implemented")
}
func (UnimplementedArticleManageServiceServer) mustEmbedUnimplementedArticleManageServiceServer() {}
func (UnimplementedArticleManageServiceServer) testEmbeddedByValue()                              {}

// UnsafeArticleManageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleManageServiceServer will
// result in compilation errors.
type UnsafeArticleManageServiceServer interface {
	mustEmbedUnimplementedArticleManageServiceServer()
}

func RegisterArticleManageServiceServer(s grpc.ServiceRegistrar, srv ArticleManageServiceServer) {
	// If the following call pancis, it indicates UnimplementedArticleManageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArticleManageService_ServiceDesc, srv)
}

func _ArticleManageService_PublishArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManageServiceServer).PublishArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleManageService_PublishArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManageServiceServer).PublishArticle(ctx, req.(*PublishArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManageService_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManageServiceServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleManageService_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManageServiceServer).UpdateArticle(ctx, req.(*UpdateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManageService_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManageServiceServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleManageService_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManageServiceServer).DeleteArticle(ctx, req.(*DeleteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManageService_GetArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManageServiceServer).GetArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleManageService_GetArticleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManageServiceServer).GetArticleList(ctx, req.(*GetArticleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManageService_QueryArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManageServiceServer).QueryArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleManageService_QueryArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManageServiceServer).QueryArticle(ctx, req.(*QueryArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleManageService_ServiceDesc is the grpc.ServiceDesc for ArticleManageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleManageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "articleManage.articleManageService",
	HandlerType: (*ArticleManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishArticle",
			Handler:    _ArticleManageService_PublishArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticleManageService_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticleManageService_DeleteArticle_Handler,
		},
		{
			MethodName: "GetArticleList",
			Handler:    _ArticleManageService_GetArticleList_Handler,
		},
		{
			MethodName: "QueryArticle",
			Handler:    _ArticleManageService_QueryArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/articleManage.proto",
}
